x^2
}
f(x) + 1
}
f(x) * 2
}
f(10)
5/6
load("E:/Desktop (important)/Introductory Econometrics/R/vote1.RData")
load("E:/Desktop (important)/Introductory Econometrics/R/ceosal1.RData")
ols <- lm(data$salary ~ data$roe)
summary(ols)
sum(ols$residuals)
sum(ols$residuals * ols$roe)
quit()
load("E:/Desktop (important)/Introductory Econometrics/R/wage1.RData")
ols <- lm(data$wage ~ data$educ)
summary(ols)
x <- "educ"
y <- "wage"
Goldfeld <- function(data, x, y, ascendent = 1, k = 1) {
# "ascendent" means I want to test a ascendent Heteroscedasticity or not.
# "k" is the number of independent variable.
l <- dim(data)[1]
c <- ceiling(l/4)
freedom <- (l-c)/2 - k - 1
head <- (l - c)/2
tail <- l - head + 1
data <- data[order(data[, x]), ]
ols_head <- lm(data[, y][1: head] ~ data[, x][1: head])
RSS_1 <- sum(ols_head$residuals^2)
ols_tail <- lm(data[, y][tail: l] ~ data[, x][tail: l])
RSS_2 <- sum(ols_tail$residuals^2)
if(ascendent == 1) {
F = RSS_2/RSS_1
} else {
F = RSS_1/RSS_2
}
result <- c("F test" = F, "degree of freedom" = round(ceiling(freedom), digits = 0))
}
result <- Goldfeld(data, x, y)
result
sum(data$wage)
sum(data$wage)/length(data)
Glejser <- function(directory, x, y) {
library(xlsx)
data <- read.xlsx(directory, sheetIndex = 1, header = TRUE)
data <- na.omit(data)
expo <- numeric()
for (i in 1:26) {
expo[i] <- 0.5 + 0.1*(i-1)
}
Pr <- numeric()
for (i in 1:length(expo)) {
ols_y <- lm(data[, y] ~ data[, x])
x_power <- data[, x]^expo[i]
e <- abs(summary(ols_y)$residuals)
ols_e <- lm(e ~ x_power)
Pr[i] <- 10^6*summary(ols_e)$coefficients[2, 4]
}
exponential <- expo[order(Pr)[1]]   # This can NOT be used to confirm the exact exponential
plot(Pr)                            # before look at the shap of plot(Pr) !
}
expo <- numeric()
for (i in 1:26) {
expo[i] <- 0.5 + 0.1*(i-1)
}
Pr <- numeric()
for (i in 1:length(expo)) {
ols_y <- lm(data[, y] ~ data[, x])
x_power <- data[, x]^expo[i]
e <- abs(summary(ols_y)$residuals)
ols_e <- lm(e ~ x_power)
Pr[i] <- 10^6*summary(ols_e)$coefficients[2, 4]
}
exponential <- expo[order(Pr)[1]]   # This can NOT be used to confirm the exact exponential
plot(Pr)
exponential
summary(ols)
ols_2 <- lm(data$wage ~ data$educ^4)
summary(ols_2)
ols_2 <- lm(data$wage ~ data$educ^3)
summary(ols_2)
install.packages("lpSolve")
library(lpSolve)
?lp
?make.lp
?make
x <- make.lp(2, 2)
install.packages("lpSolveAPI")
?make.lp
library(lpSolveAPI)
?make.lp
x <- make.lp(2, 2)
x
str(x)
class(x)
y <- x
set.cloum(x, 1, c(1, 2))
?set.column
set.column(x, 1, c(1, 2))
x
set.column(x, 2, c(3, 4))
x
y
lprec <- make.lp(0, 4)
lprec
?set.objfn
set.objfn(lprec, c(1, 3, 6.24, 0.1))
lprec
add.constriant(lprec, c(0, 78.26, 0, 29), ">=", 92.3)
add.constraint(lprec, c(0, 78.26, 0, 29), ">=", 92.3)
lprec
add.contraint(lprec, c(0.24, 0, 11.31, 0), "<=", 14.8)
add.constraint(lprec, c(0.24, 0, 11.31, 0), "<=", 14.8)
lprec
add.constraint(lprec, c(12.68, 0, 0.08, 0.9), ">=", 4)
lprec
?set.bounds
set.bounds(lprec, lower = c(28.6, 18), colunms = c(1, 4))
set.bounds(lprec, lower = c(28.6, 18), columns = c(1, 4))
lprec
set.bounds(lprec, upper = 48.98, columns = 4)
lprec
RowNames <- c("THISROW", "THATROW", "LASTROW")
ColNames <- c("COLONE", "COLTWO", "COLTHREE", "COLFOUR")
dimnames(lprec) <- list(RowNames, ColNames)
lprec
dimnames(lprec)
solve(lprec)
get.objective(lprec)
get.variables(lprec)
get.constraints(lprec)
?get.objective
?solve
?solve.lpExtPtr
?get.objective
lps.model <- make.lp(0, 3)
xt <- c(6,2,4)
add.constraint(lps.model, xt, "<=", 150)
xt <- c(1,1,6)
add.constraint(lps.model, xt, ">=", 0)
xt <- c(4,5,4)
add.constraint(lps.model, xt, "=", 40)
lps.model
set.objfn(lps.model, c(-3, -4, -3))
lps.model
solve(lps.model)
get.objective(lps.model)
get.variables(lps.model)
install.packages("pracma")
library(pracma)
names()
name()
list()
?rref
A = matrix(c(-25, 125, 5, 95), ncol = 2, nrow = 2)
A
?transpose
A''
A'
)
''
t(A)
A = t(A)
A
?colbind
cbind(A, c(11, 9.5))
B = cbind(A, c(11, 9.5))
B
rref(B)
result <- rref(B)
result[2, 3] - result[1, 3]
A <- matrix(c(-3, 130, 12, 10, 90, 10), byrow = TRUE)
A
A <- matrix(c(-3, 130, 12, 10, 90, 10), nrow = 2, ncol = 3, byrow = TRUE)
A
rref(A)
A[1, 1]  = -30
A
rref(A)
search()
library(xlsx)
search()
make.power <- function(n) {
pw <- function(x) {
x^n
}
pow
}
first <- make.power(2)
make.power <- function(n) {
pow <- function(x) {
x^n
}
pow
}
first <- make.power(2)
first
first(3)
ls(environment(cube))
cube <- make.power(3)
square <- make.ppower(2)
square <- make.power(2)
ls(environment(cube))
ls(environment(cube))
ls(environment(cube(2)))
get("n", environment(cube))
get("n", environment(square))
y <- 10
f <- function(x) {
y <- 2
}
f <- funciton(x) {
y <- 2
y^2 + g(x)
}
g <- function(x) {
x*y
}
f <- function(x) {
y <- 2
y^2 + g(x)
}
f(3)
?nlm
f <- function(x) sum((x-1:length(x))^2)
nlm(f, c(10, 10))
make.NegLogLik <- function(data, fixed=c(FALSE, FALSE)) {
params <- fixed
function(p) {
params[!fixed] <- p
mu <- params[1]
sigma <- params[2]
a <- -0.5*length(data)*log(2*pi*sigma^2)
b <- -0.5*sum((data-mu)^2) / (sigma^2)
-(a + b)
}
}
fix <- c(FALSE, FALSE)
params <- fixed
params <- fix
params[!fix] <- 5
params
!fix
params <- 4
params
mu <- params[1]
mu
sigma <- params[2]
sigma
params
set.seed(1);
normals <- rnorm(100,1, 2)
normals
summary(normals)
var(normals)
sd(normals)
nLL <- make.NegLogLik(normals)
nLL
ls(environment(nLL))
optim(c(mu = 0, sigma = 1), nLL)$par
?optim
a <- c(FALSE, 2)
a[!c]
a[!a]
a
a[!a] <- 1
a
nLL_2 <- make.NegLogLik(normals, c(FALSE, 2))
nLL_2
ls(environment(nLL_2))
optimize(nLL_2, c(-1, 3))$minimum
nLL_3 <- make.NegLogLik(normals, c(1, FALSE))
opitimize(nLL_3, c(1e-6, 10))$minimum
optimize(nLL_3, c(1e-6, 10))$minimum
nLL <- make.NegLogLik(normals, c(1, FALSE))
x <- seq(1.7, 1.9, len = 100)
x
y <- sapply(x, nLL)
y
nLL
plot(x, exp(-(y - min(y))), type = "1")
plot(x, exp(-(y - min(y))), type = "l")
nLL <- make.NegLogLik(normals, c(FALSE, 2))
x <- seq(0.5, 1.5, len = 100)
y <- sapply(x, nLL)
plot(x, exp(-y-min(y)), type = "l")
plot(x, exp(-y-min(y)))
plot(x, exp(-y-min(y)), type = "l")
library(xlsx)
library(xlsx)
load("E:/Leo_works/Introductory Econometrics/R/charity.RData")
mls <- lm(gift ~ mailsyear + giftlast + propresp, data)
ols <- lm(gift ~ mailsyear)
ols <- lm(gift ~ mailsyear, data)
desc
summary(ols)
summary(mls)
mls_2 <- mls(gift ~ mailsyear + giftlast + propresp + avggift, data)
mls_2 <- lm(gift ~ mailsyear + giftlast + propresp + avggift, data)
summary(mls_2)
cor(data$avggift, data$mailsyear)
desc
cor(data$avggift, data$giftlast)
load("E:/Leo_works/Introductory Econometrics/R/htv.RData")
summary(data$educ)
twelve <- data[which(data$educ == 12), ]
desc
length(twelve) / length(data)
dim(data)
dim(twelve)[1]/dim(data)[1]
mean(data$educ)
mean(mean(data$fatheduc), mean(data$motheduc))
mls <- lm(educ ~ motheduc + fatheduc, data)
summary(mls)
mls_3 <- lm(educ ~ motheduc + fatheduc + abil, data)
summary(mls_3)
summary(data$abil)
mls_4 <- lm(educ ~ motheduc + fatheduc + abil + abil^2, data)
coe <- mls_4coefficients
coe <- mls_4$coefficients
coe
coe[3]/(2*coe[4])
value <- -coe[3]/(2*coe[4])
value
less <- data[which(data$abil <= value), ]
dim(less)[1]/dim(data)[1]
education <- function(x) {
y <- coe[1]+coe[2]*12.18+coe[3]*12.45+coe[4]*x+coe[5]*x^2
}
coe
summary(mls4)
summary(mls_4)
mls_4 <- lm(educ ~ motheduc + fatheduc + abil + abil^2, data)
summary(mls_4)
head(data$abil^2)
mls_4 <- lm(educ ~ motheduc + fatheduc + abil + I(abil^2), data)
summary(mls_4)
coe <- mls_4$coefficients
coe
education <- function(x) {
y <- coe[1]+coe[2]*12.18+coe[3]*12.45+coe[4]*x+coe[5]*x^2
}
y <- education(data$abil)
head(y)
plot(x, y)
x <- data$abil
plot(x, y)
plot(x, y, 'l')
scat(x, y, 'l')
plot((x, y), 'l')
plot(x, y, type = "l")
plot(y, x, type = "l")
plot(x, y)
value
value <- -coe[4]/(2*coe[5])
value
coe
coe[4]
demo()
demo(Hershey)
demo(Japanese)
demo(image)
demo(graphics)
View(a)
rm(all)
?rm
remove()
demo(plotmath)
demo(persp)
demo(graphics)
demo(colors)
demo(hclColors)
demos(glm.vr)
demos(nlm)
demo(glm.vr)
demo(nlm)
demo(smooth)
demo(package = .packages(all.available = TRUE))
demo(pracma)
demo(tkcanvas)
setwd("C:/Users/Leonardo/Desktop/Porfolio")
setwd("C:/Users/Leonardo/Desktop/Portfolio")
load()
getwd()
load()
ls()
dir()
load(.RData)
?exist.file
??exist.file
list.files
list.files()
a <- list.files()
".RData" %in% a
load(".RData")
rm(a)
q()
source("Portfolio.R")
Covar
sink("try_sink")
?sink
source("Portfolio.R")
sink("try_sink2.txt")
sink()
sink("sink-examp.txt")
i <- 1:10
outer(i, i, "*")
sink()
unlink("sink-examp.txt")
sink("sink_examp.txt")
i <- 1:10
outer(i, i, "*")
?outer
outer(c(1, 0, 0), c(0, 1, 0), "*")
sink()
outer(c(1, 0, 0), c(0, 1, 0), "*")
Covar
sink()
unlink("sink_examp.txt")
Covar
unlink("try_sink")
unlink("try_sink2")
sink("try")
Covar
vignette("sink")
for i in 1:5
for (i in 1:5) {
print(i)
}
sink()
for (i in 1:5) {
print(i)
}
unlink("try")
unlink("try_sink2")
unlink("try_sink2.txt")
demo(graphics)
demo()
demo(image)
demo(Hershey)
demo(graphics)
demo(persp)
?pdf
pdf("try.pdf")
demo(persp)
unlink(try.pdf)
unlink("try.pdf")
unlink("try.pdf")
rm("try.pdf")
dev.mov(0)
dev.mov()
dev.off("try.pdf")
dev.off(try.pdf)
dev.off("try.pdf")
q()
win.metafile("try.wmf")
demo(persp)
devo.off('try.wmf')
dev.off('try.wmf')
jpeg("try2.jpg")
demo(presp)
demo(persp)
dev.off('try2.jpg')
png("try3.png")
demo(persp)
bmp("try4.bmp")
demo(persp)
q()
?sink
library()
.libPath()
.libPaths()
search()
help("lpSolveAPI")
library("lpSolveAPI")
help("lpSolveAPI")
help(package = "lpSolveAPI")
help(package = "vase")
help(package = "base")
lm(mpg ~ wt, data = mtcars)
lmfit <- lm(mpg ~ wt, data = mtcars)
summary(lmfit)
plot(lmfit)
cook <- cooks.distance(lmfit)
cook
length(mtcar$wt)
length(mtcars$wt)
help()
help.start()
?is.packages("vcd")
??is.packages
?is.package
is.package
?is.packages
??packages
find.package(vcd)
find.package("vcd")
install.packages("vcd")
help(package = "vcd")
library(vcd)
desc(Arthritis)
Arthritis
data()
data(Arthritis)
summary(Arthritis)
str(Arthritis)
demo(Arthritis)
demo(vcd)
demo("vcd")
example(Arthritis)
